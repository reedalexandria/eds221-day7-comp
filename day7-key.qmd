---
title: "Joins and strings and dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(lubridate)
```

## Joins

```{r}
animals <- tibble::tribble(
  ~location,   ~species,  ~maturity,
   "lagoon",   "bobcat",    "adult",
    "bluff",   "coyote", "juvenile",
    "creek",      "fox",    "adult",
     "oaks", "squirrel", "juvenile",
    "bluff",   "bobcat",    "adult"
  )

sites <- tibble::tribble(
  ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### Mutating Joins:

#### Full join

```{r}
full_join_example1 <- full_join(animals, sites)
# you can specify the key with by = ""
full_join_example2 <- full_join(animals, sites, by = "location")
```

Example of joining when key variables have non-matching names

```{r}
sites_2 <- sites |>
  rename(loc = location)

nonmatching <- full_join(animals, sites_2, by = c("location" = "loc"))

# when the key differs by spelling 
```

#### Left join

```{r}
left_join_example <- left_join(animals, sites)
```

#### Inner join

```{r}
inner_join_example <- inner_join(animals, sites)
```

### Filtering joins:

#### Semi join

```{r}
semi_join_example <- semi_join(animals, sites)
```

#### Anti join

```{r}
anti_join_example <- anti_join(animals, sites)
```

## Dates and times with `lubridate`

### YYYY-MM-DD

```{r}
my_date1 <- "03-15-1998"
# mdy, ymd, dmy
lubridate::mdy(my_date1)

my_date2 <- "11/7/2003"
lubridate::dmy(my_date2)

my_date3 <- "08-Jun-1974"
lubridate::dmy(my_date3)

my_date4 <- "19610518"
my_real_date <- lubridate::ymd(my_date4)

#class(my_real_date) will show that the class is Date 
```

```{r}
lubridate::ymd("1942-08-30")

lubridate::mdy("09/22/84")
```

```{r}
time <- "2020-08-12 11:18"
time <- ymd_hm(time) 
time
class(time) #POSIXct

# can have time <- lubridate::ymd_hm(time)
```

#### Converting timezones 
```{r}
with_tz(time, "America/Los_Angeles")
with_tz(time, "Africa/Addis_Ababa")

my_time <- lubridate::ymd_hms(time)
year(my_time) # gives me the year from my_time
day(my_time)
month(my_time)
hour(my_time)
minute(my_time)
second(my_time)
```

```{r}
teddy_bday <- lubridate::ymd("20170615")
#what day of the week is this:
wday(teddy_bday, label = TRUE)

alex_bday <- lubridate::ymd("19940701")
wday(alex_bday, label = TRUE)
week(alex_bday)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)

urchin_ymd <- urchin_counts |>
  mutate(date = lubridate::mdy(date)) |>
  mutate(year = year(date),
         month = month(date),
         day = day(date))

# mutate to add or remove columns
```

### Find durataion of times

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

# Create a time interval
time_interval <- interval(day_1, day_2)

# Check the length in years
time_length(time_interval, "year")
```

## `stringr` for working with strings

### str_detect

```{r}
my_string <- "Alex loves eating pasta and dessert."
my_string |>
  str_detect("love")
# TRUE
my_string |>
  str_detect("human")
# FALSE

my_string <- c("burrito", "sandwich", "taco salad")
my_string |>
  str_detect("taco")
# FALSE FALSE TRUE
```

```{r}
# filter: keep or exclude rows
# don't need pattern =

skywalkers <- starwars |>
  filter(str_detect(name, pattern = "Skywalker"))

maul <- starwars |>
  filter(str_detect(name, "Maul"))

blue_eyes <- starwars |>
  filter(str_detect(eye_color, pattern = "blue"))
```

### `str_replace` to replace string patterns

```{r}
firewalkers <- starwars |>
  mutate(name_2 = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

### `str_trim` or `str_squish` to remove excess white space

```{r}
feedback <- c(" I ate   some   nachos", "Wednesday morning  ")

# removes leading & trailing whitespaces
str_trim(feedback) 

# removes leading, trailing & duplicate interior whitespaces
str_squish(feedback)

str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)
str_to_sentence(feedback)
```

```{r}
# From star wars, create a new data fram starwars_lc that adds a new column called name_lower containing character names converted to all lowercase

starwars_lc <- starwars |>
  mutate(name_lower = str_to_lower(name))
```

### `case_when()` 

```{r}
starwars_robot <- starwars |>
  mutate(robot_status = case_when(
    species == "Droid" ~ "A ROBOT",
    species == "Human" ~ "It's a HUMAN",
    TRUE ~ "This is something else"
  ))
```




